=======================
  ADDING JSON RECIPES
=======================

Documentation:  https://docs.blamejared.com/1.20.1/en/mods/other_mods


CraftTweaker offers built-in support for many types of recipes, but mods may add their own recipe types not supported by CraftTweaker.  In these cases, we can add a custom recipe using the JSON ('.json' file extension) format, just like we would do to add a recipe to a datapack.  The easiest way to find the JSON format of an unfamiliar recipe type is often to use a program like 7zip to open the mod's JAR file (right-click on the '.jar' file of the mod, then go to "Open with" > "7zip").  From there, go to the 'data' > mod ID > 'recipes' sub-folder to view the recipes added by that mod.

You'll need to find the type of recipe you're trying to imitate, such as the 'cgm:workbench' recipe type, which is the kind of recipe used by MrCrayfish's Gun Mod (mod ID 'cgm') to assemble guns using the 'workbench' method.  Recipes in the 'recipes' sub-folder will often be grouped into smaller sub-folders based on their recipe types, which can make it easier to locate the correct one.  Just open the desired recipe JSON, and you'll be able to see how the JSON format is structured and can imitate it in your own recipes, just changing the parts you want to tweak.  The recipe type will typically be found at the top of the JSON code where it says "type", in case you aren't sure what recipe type you're looking at.

To add a JSON recipe in a CraftTweaker script, you can use this format:

<recipetype:modID:object>.addJsonRecipe(
  "name_of_recipe_here",
  { JSON text here }
);

A couple of notes:  First, the curly brackets '{ }' in line 3 are included in the JSON format text.  Every JSON file begins and ends with a curly bracket, and the code goes in between; you can replace everything in line 3 with the exact text you would use in a JSON file.

Second, the mod ID and object after 'recipetype:' in line 1 must match exactly what the "type" is in the JSON file.  For instance, if the JSON recipe says "type": "cgm:workbench", then the bracket expression in line 1 in the example above will have to be <recipetype:cgm:workbench>.

Third, the name of the recipe in line 2 will be the name the new recipe is registered as in-game.  This should be a unique identifier that will allow you to easily find which recipe might be referred to in an error message or log if necessary.  Remember that these names have the same limitations as the name of a ZS file (lowercase letters, numbers, dashes, or underscores only).

Lastly, recall that the end of the line of code in a ZS file must have a semicolon, as seen in line 4 after the addJsonRecipe() method is closed with the final parenthesis.
