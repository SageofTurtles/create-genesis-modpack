================
  INTRODUCTION
================

This tutorial is intended to be a brief all-in-one guide to the CraftTweaker scripts used in this modpack, as well as a reference for players who wish to make their own changes to the game.  This modpack uses CraftTweaker to customize the recipes, item tags, and JEI panel for better mod integration, but CraftTweaker has much more capability than is explored here.  This document will ony cover the basics of writing and understanding these scripts as they are used in this modpack.  The full documentation for CraftTweaker can be found for more information online at https://docs.blamejared.com/1.20.1/en/index (for version 1.20.1).  The beginning of each section will include a link to any relevant documentation online for additional information on that topic.

If anything in these guides is incorrect or in need of updating, you can contact SageofTurtles on our Discord server for Create: Genesis (invite link on our website at https://genesis.centralhosting.au/).


==============
  FORMATTING
==============

All CraftTweaker script files must be in ZenScript (ZS) format, meaning they end with the '.zs' file extension (as opposed to '.txt', such as this guide), and must be located within the 'scripts' folder in the '.minecraft' root directory (as done in this pack).  These files can be placed in sub-folders within 'scripts' for easier navigation.  Scripts are only required on the server-side, but I've included them in the client modpack for Genesis for players to use in their own worlds as well.

The script files in this modpack are divided into a number of sub-folders based on what they do.  Each ZS file has its own recipe (or set of recipes belonging to the same group) or other tweak according to its name and location in the 'scripts' folder.

  '.Tutorial'               a guide to CraftTweaker for users
  'added_jei'               scripts to add items or info to the JEI panel
  'standardized_recipes'    recipes changes applied to groups of blocks
  'new_recipes'             custom recipes added to the modpack
  'override_recipes'        recipes that overwrite existing recipes within the modpack
  'removed_jei'             scripts to hide unused or unobtainable items from the JEI panel
  'removed_recipes'         scripts to remove recipes from the modpack
  'tags'                    scripts to add, change, or remove tags on items

The 'new_recipes' and 'override_recipes' are divided by the type of recipe each script adds (note that the the scripts in 'override_recipes' or organized by the recipe type that they add, which may not be the same as the original recipe type being overwritten).  The 'added_jei', 'removed_jei', and 'removed_recipes' scripts are organized by the mod that adds the recipe or item.

It is important to note that ZS scripts are processed from beginning to end.  This means that lines of code at the beginning of the script will be processed first, and lines at the end of the script will be processed thereafter.  So say you're writing a script including line A to remove all smelting recipes, and line B to add a new smelting recipe.  The line A must come *before* line B; if line A comes AFTER line B, the code to remove all smelting recipes will include the recipe already added by line B.

To prevent custom recipes from being removed by accident, it is recommended to remove recipes by their unique name in most cases (instead of removing them by ingredients or outputs, which might include other recipes not intended).  The 'override_recipes' ZS files, for this same reason, begin with the removal of the default recipe(s), after which the new overriding recipe is added.


=======================
  NOTES ABOUT SCRIPTS
=======================

Documentation:  https://docs.blamejared.com/1.20.1/en/zencode/ZenCode
                https://docs.blamejared.com/1.20.1/en/getting_started


I want to briefly mention a few things that will help make writing scripts easier.

Users can add comments to their scripts to convey additional information without those comments being used when the code actually runs.  In-line comments can be added after a double-slash ('//'), and block comments can be added after '/*' and before '*/', which can be used within a single line of code or to include multiple lines of comments.  For example:

  <recipetype:minecraft:crafting>.removeAll(); // This line will remove all crafting recipes
  /*
    Only the '<recipetype:minecraft:crafting>.removeAll()' code will be used when
    running this script.  Everything after '//' in line 1 will be ignored, and this
    comment on lines 2-6 will be ignored because it is inside a block comment.
  */

It is also worth noting that line breaks and spaces are flexible in ZenScript and ignored.  For example:

  <recipetype:minecraft:crafting>
    .remove(
      <item:minecraft:golden_apple>
    );

The above will be treated as a single line of code, despite line breaks and indenting making it easier to read for a human.  (For convenience, it is highly recommended to indent lines of code that are "nested" within the lines before and after it, making it easier to visually identify how the code is divided.)  It would be exactly the same as if you had written the line like this instead:

  <recipetype:minecraft:crafting>.remove(<item:minecraft:golden_apple>);

Be aware that each complete "line" of code (even when broken down into multiple lines, as in the above examples) must end with a semicolon (';').  Since line breaks and spacing are generally ignored, this semicolon tells the program where the end of each line of code truly should be.


=====================
  CREATING A SCRIPT
=====================

Documentation:  https://docs.blamejared.com/1.20.1/en/getting_started


(This section describes the process of creating the ZS file in Windows 11.  If using a different operating system, some steps may differ slightly.)

As stated, all ZS files have to be A) using the .zs file extension type, and B) located somewhere within the 'scripts' folder or one of its sub-folders in the root directory of your Minecraft game (that being the '.minecraft' folder, if you're using the default launcher).  Make sure you have the file extensions visible when working with scripts!  On Windows 11, you can do this by opening your File Explorer, then going to "View" > "Show" and confirming that "File name extensions" has a checkmark next to it.

First, create a simple text file in your 'scripts' folder by right-clicking in the open folder, then selecting "New" > "Text Document".  This will create a plain text ('.txt' file extension) file, which can be edited with the default Notepad app, or with many other advanced programs.  Name the file of your script, then make sure the file extension at the end of the name is changed from '.txt' to '.zs' to convert the file into ZenScript.  If done correctly, the file type should now show the file type as a "ZS File".  Be aware that file names can only include the letters a-z (lowercase), numbers, dashes ('-'), and underscores ('_').  Using spaces or other characters in your script file name may cause errors.  (The same restriction also applies to recipe names you add within the scripts, as well as mod and item IDs in your code.)

Now that you have the ZS file ready, we can move on to its contents.


======================
  NAMING CONVENTIONS
======================

These conventions are general guidelines I've seen used in Minecraft and other mods and packs, and are the practices I've implemented in this modpack.  They aren't strict rules, but help to keep names consistent, predictable, and easy-to understand.


=== FILE NAMES ===

On ZS files for recipe changes, if the recipe uses only one input, the file name is the same as the name of the input item or fluid.  For instance, a script adding a new Create recipe to press a 'minecraft:copper_ingot' item into 'minecraft:redstone' would be found in the script named 'copper_ingot.zs' in the appropriate sub-folder ('scripts' > 'new_recipes' > 'pressing').

For ZS files with recipes involving multiple inputs and one output, the file name will match the output item or fluid instead of the input.  For instance, a script file to replace the default Create mixing recipe for 'create:brass_ingot' with another recipe to craft 'minecraft:iron_ingot' and 'minecraft:gold_ingot' into 'create:brass_ingot' would be named 'brass_ingot.zs' and located in the appropriate sub-folder ('scripts' > 'override_recipes' > 'crafting').

Some recipes may have both multiple inputs AND outputs.  In these cases, it's up to the script author to decide which is the "main" item or fluid to name the ZS file after.

In cases where multiple recipes of the same type have the same name, adding an additional input or output to the file name can be done to distinguish them.  For example, two ZS files each adding mixing recipe to produce black dye would both be named 'black_dye.zs'.  So instead, one of the recipes produced using 'genesis_additions:coal_dust' could be named 'black_dye_from_coal_dust.zs' and the other recipe produced using 'minecraft:wither_rose' could be named 'black_dye_from_wither_rose.zs'.  This way, both ZS files have unique names.


=== RECIPE NAMES ===

Almost all recipes added via CraftTweaker must be given a name to be registered under by the mod.  These names are written within the recipe code itself.  For example, in the script code...

  <recipetype:minecraft:crafting>.addJsonRecipe(
    "name_text",
    { JSON text }
  );

...the "name_text" in line 2 will be the registry name for this JSON recipe.  These registry names should be unique from one another to prevent potential errors and to simplify troubleshooting.  The to ensure unique recipe names in-game, this modpack uses the ZS file name as the recipe name, with the recipe type added to the end.  So a ZS file named 'brass_ingot_from_zinc_block.zs' which adds a 'create:compacting' type recipe would have the registry name "brass_ingot_from_zinc_block_compacting" within the script code adding that recipe.


=== REMOVALS ===

The ZS files removing recipes in the 'scripts' > 'removed_recipes' sub-folder are divided by the mod ID each recipe was added by.

The ZS files removing items from the JEI panel in-game (found in 'scripts' > 'removed_jei') have only a single file for each mod ID.  Each script file contains all the the items removed from JEI for that mod ID.


=== TAGS ===

Each ZS file in the 'scripts' > 'tags' sub-folder is named according to the tag that it adds, removes, or modifies.  For example, the 'dough.zs' file removes the item 'farmersdelight:wheat_dough' from the '#forge:dough' tag.  Likewise, the 'createdeco_shipping_containers.zs' file adds all 16 color variants of the shipping containers from the Create Deco mod to the '#createdeco:shipping_containers' tag.
