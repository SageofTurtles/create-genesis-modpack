==================
  CODING RECIPES
==================

Below is general information for writing scripts to add or remove recipes using CraftTweaker.  These things apply to most recipe types, which is why they're included here, but check the 'Example Scripts' folder for guides on specific recipe types.


=============
  VARIABLES
=============

Entries in an "array" (a list) are shown in square brackets '[ ]'.  These can hold more than one entry of the accepted types, you would just need to use a comma between entries to indicate the next item is a new entry in the list.  Even if there is nothing included in the array, you still need the empty brackets in the correct location!  This is because these lines of code require specific parameters in a specific order, so the empty '[ ]' indicates no entries for that parameter for CraftTweaker to ignore it.  If you removed the brackets entirely, the program would still be looking for the missing parameter, causing errors.  (The exceptions to this are 'minecraft:crafting' and 'create:mechanical_crafting' recipe types, since those allow the user to exclude empty rows and columns from the crafting grid.)

The bracket expression <constant:create:heat_condition:X> in Create recipe types can only have the following possible values for 'X': 'none', 'heated', 'superheated'.  These indicate, in order: no heating requirement under the basin, a lit blaze burner under the basin, or a blue superheated blaze burner under the basin.

The 'count' variable is included after an item expression followed by an asterisk.  For example, '<item:minecraft:stone> * 64' would indicate a full stack of 64 stone.  If a count is not included, it will default to 1. So '<item:minecraft:stone>' (no count) would indicate only 1 stone.

The 'amount' variable is included after a fluid expression followed by an asterisk, and expresses a quantity in millibuckets (1 B = 1,000 mB).  For example, '<fluid:minecraft:water> * 500' would indicate 500 mB (half a bucket's worth) of water.  The 'amount' will almost always be needed when writing a script including fluids.

The 'chance' variable is included after an item expression followed by a percentage sign, and expresses the probability of a recipe producing that result as a percentage.  For example, '<item:minecraft:stone> % 12.5' would indicate a 12.5% chance of 1 stone being returned.  This can also be paired with a 'count' variable if the item expression and count are enclosed by parentheses.  So '(<item:minecraft:stone> * 4) % 25' would indicate a 25% chance of 4 stone being returned.  (Note that the chance applies to the count and item as a single unit, i.e. there is a 25% chance of receiving 4 stone, or a 75% chance of receiving nothing.)  If a 'chance' percentage is not included, it will default to 100%.

The 'duration' variable indicates how long a Create recipe will take to process.  This is usually a required value to include in your scripts, but the default is always 100.

For some Create recipes, there is a "base" item and a "held" item.  The "base" item in these recipes is the item or block being acted upon, and the "held" item is the item applied to the base item or block.  For example, to craft brass casings requires the player having a stripped log and applying a brass ingot to the stripped log, either with a deployer or by right-clicking the stripped log with the brass ingot in their hand.  In this recipe type, the "base" item would be the stripped log and the "held" item would be the brass ingot.


============================
  REMOVING RECIPES BY TYPE
============================

Some of these methods may not work correctly for modded recipe types.  If you experience issues using one of these, try replacing the '<recipe_type_expression>' with the corresponding Recipe Manager (if one exists).  Check the documentation for that recipe type online for more information and examples.

//  Remove a specific recipe of a given type by its registered name
<recipe_type_expression>.removeByName("recipe_name");

//  Remove all recipes of a given type with a specified output
<recipe_type_expression>.remove(<item_or_fluid_output_expression>);

//  Remove all recipes of a given type with a specified input
<recipe_type_expression>.removeByInput(<item_or_fluid_input_expression>);

//  Remove all recipes of a given type added by a specified mod
<recipe_type_expression>.removeByModid("mod_ID");

//  Remove all recipes of a given type
<recipe_type_expression>.removeAll();


================================
  REMOVING RECIPES OF ANY TYPE
================================

The scripts in the above section can be used for making changes to a specific recipe type.  The following scripts, however, will apply to all CraftTweaker-supported recipe types without a particular recipe type being specified.

Documentation:  https://docs.blamejared.com/1.20.1/en/vanilla/api/recipe/manager/GenericRecipesManager

//  Remove a supported recipe by its registered name
GenericRecipesManager.removeByName("recipe_name");

//  Remove all supported recipes with a specified output
recipes.remove(<item_output_expression>);

//  Remove all supported recipes with a specified input
recipes.removeByInput(<item_input_expression>);

//  Remove all supported recipes added by a specified mod
recipes.removeByModid("mod_ID");

//  Remove all supported recipes
recipes.removeAll();
